// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())

  Candidate Candidate?
  HR        HR?
}

model Candidate {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  resumeUrl       String?
  profileComplete Boolean @default(false)
  userId          String  @unique @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])

  applications CandidateJob[] // ✅ Explicit relation
  Job          Job?           @relation(fields: [jobId], references: [id])
  jobId        String?        @db.ObjectId
  Interview    Interview[]
}

model HR {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName       String
  isProfileComplete Boolean @default(false)
  jobs              Job[]
  department        String?
  position          String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  hrId        String   @db.ObjectId
  hr          HR       @relation(fields: [hrId], references: [id])

  applications CandidateJob[] // ✅ Explicit relation
  Candidate    Candidate[]
}

model Interview {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle    String
  scheduledAt DateTime
  status      String
  score       Float?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @db.ObjectId
}

model CandidateJob {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @db.ObjectId

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String @db.ObjectId

  appliedAt DateTime @default(now())
  status    String   @default("pending") // optional: pending/accepted/rejected
}
